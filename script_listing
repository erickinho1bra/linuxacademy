#!/bin/more
========================
SCRIPT NAME: browsh_install.sh
========================
#!/bin/bash
# script to install browsh cli based web browser

clear

###### Variable definitions - start

CPU_ARCH=`lscpu | grep Architecture | gawk '{print $2}'`
FIREFOX_EXIST=`hash firefox 2>/dev/null ; echo $?`
BROWSH_URL_32BIT="https://github.com/browsh-org/browsh/releases/download/v1.4.12/browsh_1.4.12_linux_386.rpm"
BROWSH_URL_64BIT="https://github.com/browsh-org/browsh/releases/download/v1.4.12/browsh_1.4.12_linux_amd64.rpm"
BROWSH_RPM_32BIT="browsh_1.4.12_linux_386.rpm"
BROWSH_RPM_64BIT="browsh_1.4.12_linux_amd64.rpm"

###### Variable definitions - end



##### Fuction definitions- start

echo ""
echo "Welcome to the browsh installation script! (Script needs to be run as ROOT!)"
echo ""

# Function that checks if the necessary prerequisites are installed for browsh
funcCheckPreReq () {
if [ $CPU_ARCH == "x86_64" ] ; then
  echo "CPU Architecture is 64bit ($CPU_ARCH)"
  if [ $FIREFOX_EXIST == "0" ] ; then
    echo "Firefox is installed"
    return 100
  else
    echo "Firefox is not installed"
    return 101
  fi
elif [ $FIREFOX_EXIST == "x86" ] ; then
  echo "CPU Architecture is 32bit ($CPU_ARCH)"
  if [ $FIREFOX_EXIST == "0" ] ; then
    echo "Firefox is installed"
    return 110
  else
    echo "Firefox is not installed"
    return 111
  fi
else
  echo "Could not determine CPU Architecture"
  echo "Aborting script!"
  return 500
fi
}

# Funciton to install Firefox
funcFFInstall () {
  read -p "Would you like to install Firefox? (Answer Y or N - default is Y) " INSTALL_FF_RESP
  if [ "$INSTALL_FF_RESP" == "Y" ] || [ "$INSTALL_FF_RESP" == "y" ] || [ "$INSTALL_FF_RESP" == "" ] ; then
    echo "Installing Firefox!"
    yum install firefox -y   1>/dev/null
    FF_INSTALL_STATUS="`echo $?`"
    if [ "$FF_INSTALL_STATUS" == "0" ] ; then
      echo "Firefox has been successfully installed!"
    else
      echo "Firefox has NOT been successfully installed! Aborting script!"
      exit 1
    fi
  elif [ "$INSTALL_FF_RESP" == "N" ] || [ "$INSTALL_FF_RESP" == "n" ] ; then
    echo "NOT installing Firefox dependency. Aborting script!"
  fi
}

# Function to pull browh install and install it with RPM
funcBrInstall () {
if [ $CPU_ARCH == "x86_64" ] ; then
  echo "Pulling 64 bit browsh install file from browsh website!"
  wget $BROWSH_URL_64BIT
  echo "Installing RPM"
  rpm -Uvh $BROWSH_RPM_64BIT
elif [ $CPU_ARCH == "x86" ] ; then
  echo "Pulling 32 bit browsh install file from browsh website!"
  wget $BROWSH_URL_32BIT
  echo "Installing RPM"
  rpm -Uvh $BROWSH_RPM_32BIT
fi
}

# Function to handle error of Firefox not being installed, call function to install Firefox (if necessary), and call function to install browsh
funcPreReqAndBrInstall () {
fPRStatus="`echo $?`"
if [ "$fPRStatus" == "100" ] ; then
  echo "Firefox is installed already! Proceeding with browsh installation"
elif [ "$fPRStatus" == "101" ] ; then
  funcFFInstall
  funcBrInstall
elif [ "$fPRStatus" == "110" ] ; then
  echo "Firefox is installed already! Proceeding with browsh installation"
elif [ "$fPRStatus" == "111" ] ; then
  funcFFInstall
else
  echo "Something went wrong"
fi
}

###### Function definitions - stop


###### Script - start

# Function that checks if the necessary prerequisites are installed for browsh
funcCheckPreReq

# Function that installs browsh
funcPreReqAndBrInstall

###### Script - end


# wget https://github.com/browsh-org/browsh/releases/download/v1.4.12/browsh_1.4.12_linux_amd64.rpm
# rpm -Uvh browsh_1.4.12_linux_amd64.rpm


# wget
# rpm -Uvh browsh_1.4.12_linux_386.rpm
========================
SCRIPT NAME: checkargs2.sh
========================
#!/bin/bash
# script to check command line parameters

##### global variables - start



##### global variable - stop



##### function declerations - start



##### function declerations - stop



##### script - start

: ${3?"USAGE: $1 ARGUMENT $2 ARGUMENT $3 ARGUMENT"}

echo "I got all three!"

##### script - stop
========================
SCRIPT NAME: checkargs.sh
========================
#!/bin/bash
# script to check command line parameters

##### global variables - start



##### global variable - stop



##### function declerations - start



##### function declerations - stop



##### script - start

if [ "$#" != "3" ] ; then
  echo "USAGE: checkargs.sh [parm1] [parm2] [parm2]"
  exit 300
fi

echo "I live! I got what I needed!"

##### script - stop
========================
SCRIPT NAME: commandsub.sh
========================
#!/bin/bash

# This script is intended to show how to do simple substitution

 

shopt -s expand_aliases

 

alias TODAY="date"

alias UFILES="find /home -user user"

 

TODAYSDATE=`date`

USERFILES=`find /home -user user`

 

echo "Today's Date: $TODAYSDATE"

echo "All Files Owned by USER: $USERFILES"

 

A=`TODAY`

B=`UFILES`

 

echo "With Alias, TODAY is: $A"

echo "With Alias, UFILES is: $B"
========================
SCRIPT NAME: do_the_git_thing.sh
========================
#!/bin/bash

##### Variable definition - start

# function to commit changes and push to master git branch
funcComAndPush () {
  git commit -a -m "$COMMESS" 1>/dev/null
  git push origin master
}

##### Variable definitions - stop


##### Script - start

# Stage changes you want to commit
git add .

read -p "What do you want your commit message to be? " COMMESS

# Prompt user for git commit message
if [ "$COMMESS" != "" ] ; then
  echo "Commiting with message: $COMMESS "
else
  COMMESS="Auto commit to github"
  echo "Using default commit message: $COMMESS"
fi

# Commit changes (if any)
git commit -a -m "$COMMESS" 1>/dev/null

# Record exit code
COMSTATUS=`echo $?`

# Commit depending on whether there are changes to the repository
if [ "$COMSTATUS" == "1" ] ; then
  echo "Nothing to commit!"
  while [ "$COMDECISION" == "" ] ; do
    read -p "Would you like to force a commit? (Y or N) " COMDECISION
    if [ "$COMDECISION" == "Y" ] || [ "$COMDECISION" == "y" ] ; then
      echo "Forcing commit"
      funcComAndPush
    elif [ "$COMDECISION" == "N" ] || [ "$COMDECISION" == "n" ] ; then
      echo "Not forcing commit"
      exit 1
    fi
  done
else
  echo "Committing files (not sins)"
  funcComAndPush
fi
========================
SCRIPT NAME: errorexit.sh
========================
#!/bin/bash
# script to demonstrate error handling with exit

echo "Change to a directory and list the contents"
DIRECTORY=$1

cd $DIRECTORY 2>/dev/null

if [ "$?" = "0" ] ; then
  echo "We can change into the directory $DIRECTORY, and here are the contents"
  echo "`ls -l`"
else
  echo "Cannot change directories, exiting with an error and no listing"
  exit 1
fi
========================
SCRIPT NAME: filedesc.sh
========================
#!/bin/bash
# script to show how file descriptors work

read -p "What file would you like to read? " FILENAME

exec 5<>$FILENAME

while read -r SUPERHERO; do
  echo "Superhero Name: $SUPERHERO"
done <&5

echo "File read on `date`" >&5

exec 5>&-
========================
SCRIPT NAME: funcparms.sh
========================
#!/bin/bash
# demo of functional parameter passing

#global variable
USERNAME=$1

# function definitions - start

# calculate age in days
funcAgeInDays () {
  echo "Hello $USERNAME, you are $1 years old."
  echo "That makes you approximately `expr $1 \* 365` days old"
}

# function definitions - stop

# script - start

clear

read -p "Enter your age: " USERAGE

# calculate age in days
funcAgeInDays $USERAGE

# script - stop
========================
SCRIPT NAME: funcstruct.sh
========================
#/bin/bash
# demo of functions within a shell script structure

# script or global variable
CMDLINE=$1

#  function definitions - start

# displays a message
funcExample () {
  echo "This is an example"
}

# function definitions - stop

# beginning of the script
echo "This is the start.. "

funcExample

# end of the script
========================
SCRIPT NAME: get-docker.sh
========================
#!/bin/sh
set -e

# This script is meant for quick & easy install via:
#   $ curl -fsSL https://get.docker.com -o get-docker.sh
#   $ sh get-docker.sh
#
# For test builds (ie. release candidates):
#   $ curl -fsSL https://test.docker.com -o test-docker.sh
#   $ sh test-docker.sh
#
# NOTE: Make sure to verify the contents of the script
#       you downloaded matches the contents of install.sh
#       located at https://github.com/docker/docker-install
#       before executing.
#
# Git commit from https://github.com/docker/docker-install when
# the script was uploaded (Should only be modified by upload job):
SCRIPT_COMMIT_SHA=4957679


# This value will automatically get changed for:
#   * edge
#   * test
#   * experimental
DEFAULT_CHANNEL_VALUE="edge"
if [ -z "$CHANNEL" ]; then
	CHANNEL=$DEFAULT_CHANNEL_VALUE
fi

DEFAULT_DOWNLOAD_URL="https://download.docker.com"
if [ -z "$DOWNLOAD_URL" ]; then
	DOWNLOAD_URL=$DEFAULT_DOWNLOAD_URL
fi

DEFAULT_REPO_FILE="docker-ce.repo"
if [ -z "$REPO_FILE" ]; then
	REPO_FILE="$DEFAULT_REPO_FILE"
fi

SUPPORT_MAP="
x86_64-centos-7
x86_64-fedora-28
x86_64-fedora-29
x86_64-debian-jessie
x86_64-debian-stretch
x86_64-debian-buster
x86_64-ubuntu-trusty
x86_64-ubuntu-xenial
x86_64-ubuntu-bionic
x86_64-ubuntu-cosmic
s390x-ubuntu-xenial
s390x-ubuntu-bionic
s390x-ubuntu-cosmic
ppc64le-ubuntu-xenial
ppc64le-ubuntu-bionic
ppc64le-ubuntu-cosmic
aarch64-ubuntu-xenial
aarch64-ubuntu-bionic
aarch64-ubuntu-cosmic
aarch64-debian-jessie
aarch64-debian-stretch
aarch64-debian-buster
aarch64-fedora-28
aarch64-fedora-29
aarch64-centos-7
armv6l-raspbian-jessie
armv7l-raspbian-jessie
armv6l-raspbian-stretch
armv7l-raspbian-stretch
armv7l-debian-jessie
armv7l-debian-stretch
armv7l-debian-buster
armv7l-ubuntu-trusty
armv7l-ubuntu-xenial
armv7l-ubuntu-bionic
armv7l-ubuntu-cosmic
"

mirror=''
DRY_RUN=${DRY_RUN:-}
while [ $# -gt 0 ]; do
	case "$1" in
		--mirror)
			mirror="$2"
			shift
			;;
		--dry-run)
			DRY_RUN=1
			;;
		--*)
			echo "Illegal option $1"
			;;
	esac
	shift $(( $# > 0 ? 1 : 0 ))
done

case "$mirror" in
	Aliyun)
		DOWNLOAD_URL="https://mirrors.aliyun.com/docker-ce"
		;;
	AzureChinaCloud)
		DOWNLOAD_URL="https://mirror.azure.cn/docker-ce"
		;;
esac

command_exists() {
	command -v "$@" > /dev/null 2>&1
}

is_dry_run() {
	if [ -z "$DRY_RUN" ]; then
		return 1
	else
		return 0
	fi
}

deprecation_notice() {
	distro=$1
	date=$2
	echo
	echo "DEPRECATION WARNING:"
	echo "    The distribution, $distro, will no longer be supported in this script as of $date."
	echo "    If you feel this is a mistake please submit an issue at https://github.com/docker/docker-install/issues/new"
	echo
	sleep 10
}

get_distribution() {
	lsb_dist=""
	# Every system that we officially support has /etc/os-release
	if [ -r /etc/os-release ]; then
		lsb_dist="$(. /etc/os-release && echo "$ID")"
	fi
	# Returning an empty string here should be alright since the
	# case statements don't act unless you provide an actual value
	echo "$lsb_dist"
}

add_debian_backport_repo() {
	debian_version="$1"
	backports="deb http://ftp.debian.org/debian $debian_version-backports main"
	if ! grep -Fxq "$backports" /etc/apt/sources.list; then
		(set -x; $sh_c "echo \"$backports\" >> /etc/apt/sources.list")
	fi
}

echo_docker_as_nonroot() {
	if is_dry_run; then
		return
	fi
	if command_exists docker && [ -e /var/run/docker.sock ]; then
		(
			set -x
			$sh_c 'docker version'
		) || true
	fi
	your_user=your-user
	[ "$user" != 'root' ] && your_user="$user"
	# intentionally mixed spaces and tabs here -- tabs are stripped by "<<-EOF", spaces are kept in the output
	echo "If you would like to use Docker as a non-root user, you should now consider"
	echo "adding your user to the \"docker\" group with something like:"
	echo
	echo "  sudo usermod -aG docker $your_user"
	echo
	echo "Remember that you will have to log out and back in for this to take effect!"
	echo
	echo "WARNING: Adding a user to the \"docker\" group will grant the ability to run"
	echo "         containers which can be used to obtain root privileges on the"
	echo "         docker host."
	echo "         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface"
	echo "         for more information."

}

# Check if this is a forked Linux distro
check_forked() {

	# Check for lsb_release command existence, it usually exists in forked distros
	if command_exists lsb_release; then
		# Check if the `-u` option is supported
		set +e
		lsb_release -a -u > /dev/null 2>&1
		lsb_release_exit_code=$?
		set -e

		# Check if the command has exited successfully, it means we're in a forked distro
		if [ "$lsb_release_exit_code" = "0" ]; then
			# Print info about current distro
			cat <<-EOF
			You're using '$lsb_dist' version '$dist_version'.
			EOF

			# Get the upstream release info
			lsb_dist=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'id' | cut -d ':' -f 2 | tr -d '[:space:]')
			dist_version=$(lsb_release -a -u 2>&1 | tr '[:upper:]' '[:lower:]' | grep -E 'codename' | cut -d ':' -f 2 | tr -d '[:space:]')

			# Print info about upstream distro
			cat <<-EOF
			Upstream release is '$lsb_dist' version '$dist_version'.
			EOF
		else
			if [ -r /etc/debian_version ] && [ "$lsb_dist" != "ubuntu" ] && [ "$lsb_dist" != "raspbian" ]; then
				if [ "$lsb_dist" = "osmc" ]; then
					# OSMC runs Raspbian
					lsb_dist=raspbian
				else
					# We're Debian and don't even know it!
					lsb_dist=debian
				fi
				dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
				case "$dist_version" in
					9)
						dist_version="stretch"
					;;
					8|'Kali Linux 2')
						dist_version="jessie"
					;;
				esac
			fi
		fi
	fi
}

semverParse() {
	major="${1%%.*}"
	minor="${1#$major.}"
	minor="${minor%%.*}"
	patch="${1#$major.$minor.}"
	patch="${patch%%[-.]*}"
}

ee_notice() {
	echo
	echo
	echo "  WARNING: $1 is now only supported by Docker EE"
	echo "           Check https://store.docker.com for information on Docker EE"
	echo
	echo
}

do_install() {
	echo "# Executing docker install script, commit: $SCRIPT_COMMIT_SHA"

	if command_exists docker; then
		docker_version="$(docker -v | cut -d ' ' -f3 | cut -d ',' -f1)"
		MAJOR_W=1
		MINOR_W=10

		semverParse "$docker_version"

		shouldWarn=0
		if [ "$major" -lt "$MAJOR_W" ]; then
			shouldWarn=1
		fi

		if [ "$major" -le "$MAJOR_W" ] && [ "$minor" -lt "$MINOR_W" ]; then
			shouldWarn=1
		fi

		cat >&2 <<-'EOF'
			Warning: the "docker" command appears to already exist on this system.

			If you already have Docker installed, this script can cause trouble, which is
			why we're displaying this warning and provide the opportunity to cancel the
			installation.

			If you installed the current Docker package using this script and are using it
		EOF

		if [ $shouldWarn -eq 1 ]; then
			cat >&2 <<-'EOF'
			again to update Docker, we urge you to migrate your image store before upgrading
			to v1.10+.

			You can find instructions for this here:
			https://github.com/docker/docker/wiki/Engine-v1.10.0-content-addressability-migration
			EOF
		else
			cat >&2 <<-'EOF'
			again to update Docker, you can safely ignore this message.
			EOF
		fi

		cat >&2 <<-'EOF'

			You may press Ctrl+C now to abort this script.
		EOF
		( set -x; sleep 20 )
	fi

	user="$(id -un 2>/dev/null || true)"

	sh_c='sh -c'
	if [ "$user" != 'root' ]; then
		if command_exists sudo; then
			sh_c='sudo -E sh -c'
		elif command_exists su; then
			sh_c='su -c'
		else
			cat >&2 <<-'EOF'
			Error: this installer needs the ability to run commands as root.
			We are unable to find either "sudo" or "su" available to make this happen.
			EOF
			exit 1
		fi
	fi

	if is_dry_run; then
		sh_c="echo"
	fi

	# perform some very rudimentary platform detection
	lsb_dist=$( get_distribution )
	lsb_dist="$(echo "$lsb_dist" | tr '[:upper:]' '[:lower:]')"

	case "$lsb_dist" in

		ubuntu)
			if command_exists lsb_release; then
				dist_version="$(lsb_release --codename | cut -f2)"
			fi
			if [ -z "$dist_version" ] && [ -r /etc/lsb-release ]; then
				dist_version="$(. /etc/lsb-release && echo "$DISTRIB_CODENAME")"
			fi
		;;

		debian|raspbian)
			dist_version="$(sed 's/\/.*//' /etc/debian_version | sed 's/\..*//')"
			case "$dist_version" in
				9)
					dist_version="stretch"
				;;
				8)
					dist_version="jessie"
				;;
			esac
		;;

		centos)
			if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
				dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
			fi
		;;

		rhel|ol|sles)
			ee_notice "$lsb_dist"
			exit 1
			;;

		*)
			if command_exists lsb_release; then
				dist_version="$(lsb_release --release | cut -f2)"
			fi
			if [ -z "$dist_version" ] && [ -r /etc/os-release ]; then
				dist_version="$(. /etc/os-release && echo "$VERSION_ID")"
			fi
		;;

	esac

	# Check if this is a forked Linux distro
	check_forked

	# Check if we actually support this configuration
	if ! echo "$SUPPORT_MAP" | grep "$(uname -m)-$lsb_dist-$dist_version" >/dev/null; then
		cat >&2 <<-'EOF'

		Either your platform is not easily detectable or is not supported by this
		installer script.
		Please visit the following URL for more detailed installation instructions:

		https://docs.docker.com/engine/installation/

		EOF
		exit 1
	fi

	# Run setup for each distro accordingly
	case "$lsb_dist" in
		ubuntu|debian|raspbian)
			pre_reqs="apt-transport-https ca-certificates curl"
			if [ "$lsb_dist" = "debian" ]; then
				# libseccomp2 does not exist for debian jessie main repos for aarch64
				if [ "$(uname -m)" = "aarch64" ] && [ "$dist_version" = "jessie" ]; then
					add_debian_backport_repo "$dist_version"
				fi
			fi

			if ! command -v gpg > /dev/null; then
				pre_reqs="$pre_reqs gnupg"
			fi
			apt_repo="deb [arch=$(dpkg --print-architecture)] $DOWNLOAD_URL/linux/$lsb_dist $dist_version $CHANNEL"
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c 'apt-get update -qq >/dev/null'
				$sh_c "apt-get install -y -qq $pre_reqs >/dev/null"
				$sh_c "curl -fsSL \"$DOWNLOAD_URL/linux/$lsb_dist/gpg\" | apt-key add -qq - >/dev/null"
				$sh_c "echo \"$apt_repo\" > /etc/apt/sources.list.d/docker.list"
				$sh_c 'apt-get update -qq >/dev/null'
			)
			pkg_version=""
			if [ -n "$VERSION" ]; then
				if is_dry_run; then
					echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
				else
					# Will work for incomplete versions IE (17.12), but may not actually grab the "latest" if in the test channel
					pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/~ce~.*/g" | sed "s/-/.*/g").*-0~$lsb_dist"
					search_command="apt-cache madison 'docker-ce' | grep '$pkg_pattern' | head -1 | cut -d' ' -f 4"
					pkg_version="$($sh_c "$search_command")"
					echo "INFO: Searching repository for VERSION '$VERSION'"
					echo "INFO: $search_command"
					if [ -z "$pkg_version" ]; then
						echo
						echo "ERROR: '$VERSION' not found amongst apt-cache madison results"
						echo
						exit 1
					fi
					pkg_version="=$pkg_version"
				fi
			fi
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "apt-get install -y -qq --no-install-recommends docker-ce$pkg_version >/dev/null"
			)
			echo_docker_as_nonroot
			exit 0
			;;
		centos|fedora)
			yum_repo="$DOWNLOAD_URL/linux/$lsb_dist/$REPO_FILE"
			if ! curl -Ifs "$yum_repo" > /dev/null; then
				echo "Error: Unable to curl repository file $yum_repo, is it valid?"
				exit 1
			fi
			if [ "$lsb_dist" = "fedora" ]; then
				if [ "$dist_version" -lt "28" ]; then
					echo "Error: Only Fedora >=28 is supported"
					exit 1
				fi

				pkg_manager="dnf"
				config_manager="dnf config-manager"
				enable_channel_flag="--set-enabled"
				disable_channel_flag="--set-disabled"
				pre_reqs="dnf-plugins-core"
				pkg_suffix="fc$dist_version"
			else
				pkg_manager="yum"
				config_manager="yum-config-manager"
				enable_channel_flag="--enable"
				disable_channel_flag="--disable"
				pre_reqs="yum-utils"
				pkg_suffix="el"
			fi
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "$pkg_manager install -y -q $pre_reqs"
				$sh_c "$config_manager --add-repo $yum_repo"

				if [ "$CHANNEL" != "stable" ]; then
					$sh_c "$config_manager $disable_channel_flag docker-ce-*"
					$sh_c "$config_manager $enable_channel_flag docker-ce-$CHANNEL"
				fi
				$sh_c "$pkg_manager makecache"
			)
			pkg_version=""
			if [ -n "$VERSION" ]; then
				if is_dry_run; then
					echo "# WARNING: VERSION pinning is not supported in DRY_RUN"
				else
					pkg_pattern="$(echo "$VERSION" | sed "s/-ce-/\\\\.ce.*/g" | sed "s/-/.*/g").*$pkg_suffix"
					search_command="$pkg_manager list --showduplicates 'docker-ce' | grep '$pkg_pattern' | tail -1 | awk '{print \$2}'"
					pkg_version="$($sh_c "$search_command")"
					echo "INFO: Searching repository for VERSION '$VERSION'"
					echo "INFO: $search_command"
					if [ -z "$pkg_version" ]; then
						echo
						echo "ERROR: '$VERSION' not found amongst $pkg_manager list results"
						echo
						exit 1
					fi
					# Cut out the epoch and prefix with a '-'
					pkg_version="-$(echo "$pkg_version" | cut -d':' -f 2)"
				fi
			fi
			(
				if ! is_dry_run; then
					set -x
				fi
				$sh_c "$pkg_manager install -y -q docker-ce$pkg_version"
			)
			echo_docker_as_nonroot
			exit 0
			;;
	esac
	exit 1
}

# wrapped up in a function so that we have some protection against only getting
# half the file during "curl | sh"
do_install
========================
SCRIPT NAME: ifsdelim.sh
========================
#!/bin/bash
# delimter example script

read -p "What file would you like to read? " FILE
read -p "What delimiter would you like to use? " DELIM

IFS="$DELIM"

while read -r CPU MEMORY DISK;
do
  printf "CPU: $CPU \n"
  printf "Memory: $MEMORY \n"
  printf "Disk: $DISK \n"
done < "$FILE"
========================
SCRIPT NAME: interactive_script.sh
========================
#!/bin/bash

clear

read -p "Hello, what is your first name? " FIRSTNAME
read -p "$FIRSTNAME, what a lovely name! What is your last name? " LASTNAME
read -p "Oh, the $LASTNAME family. Powerful people. And, lastly, how old are you? " USERAGE
RESPONSETOAGE=`expr "$USERAGE" - 5`
echo "Wow, you don't look a day under $RESPONSETOAGE!"

NEWAGE=`expr "$USERAGE" + 10`
echo "Well, $FIRSTNAME $LASTNAME, it looks like in 10 years you will be a whopping $NEWAGE years old!!"
========================
SCRIPT NAME: makedoc.sh
========================
#!/bin/bash
# <add comments here>

##### global variables - start

DOCFILE="script_listing"

##### global variable - stop



##### function declerations - start



##### function declerations - stop



##### script - start

echo "#!/bin/more" > "$DOCFILE"

ls *.sh > tmplisting.txt

while IFS= read -r FILENAME; do
  if [ -f "$FILENAME" ] ; then
    echo "========================" >> $DOCFILE
    echo "SCRIPT NAME: $FILENAME" >> $DOCFILE
    echo "========================" >> $DOCFILE
    echo ""
    echo "`cat $FILENAME`" >> $DOCFILE
  fi
done < tmplisting.txt

chmod 755 "$DOCFILE"

rm tmplisting.txt

##### script - stop
========================
SCRIPT NAME: nested.sh
========================
#/bin/bash
# demo of nested function and some abstraction

# global virable
GENDER=$1

##### Function definitions - start

# create a human being
funcHuman () {
  ARMS=2
  LEGS=2

  funcMale () {
    BEARD=1

    echo "This man has $ARMS arms AND $LEGS legs, with $BEARD beard(s)..."
    echo ""
  }

  funcFemale () {
    echo "This woman has $ARMS arms and $LEGS legs, with $BEARD beards(s)..."
    echo ""
  }

}

##### Function definitions - stop


##### Script - start

clear
echo "Determining characteristics of the gender $GENDER"

if [ "$GENDER" == "male" ] ; then
  funcHuman
  funcMale
else
  funcHuman
  funcFemale
fi

##### Script - stop
========================
SCRIPT NAME: overriding.sh
========================
#!/bin/bash
#  overrid/trap the system exit and execute a custom function

##### global variables - start
TMPFILE="tmpfile.txt"
TMPFILE2="tmpfile2.txt"

trap 'funcMyExit' EXIT

##### global variable - stop



##### function declerations - start

# run this exit instead of the default exit when called
funcMyExit () {
  echo "Exit intercepted.."
  echo "Cleaning up the temp files..."
  rm -rf tmpfile*.txt
  exit 255
}

##### function declerations - stop



##### script - start

echo "Write something to tmp file for later use..." > $TMPFILE
echo "Write something to tmp file 2 for later use..." > $TMPFILE2

echo "Trying to copy the indicated file before processing..."
cp -rf $1 newfile.txt 2>/dev/null

if [ "$?" -eq "0" ] ; then
  echo "Everything worked out ok..."
else
  echo "I guess it did not work out ok..."
  exit 1
fi

##### script - stop
========================
SCRIPT NAME: reading_files.sh
========================
#!/bin/bash
# this is a script that looks for a file called "superheroes.txt", asks if you want to read that file, if not, asks what file you want to read, and then prints out each line seperately

line_num=1

if [ -f superheroes.txt ] ; then
  read -p "Would you like to print out the lines of 'superheroes.txt'? (y or n) " read_response
  if [ "$read_response" == "y" -o "$read_response" == "yes" ] ; then
    printf "Reading 'superheroes.txt'\n"
    file_to_read="superheroes.txt"
    while read line ; do
      printf "%s\n" "Line $line_num: $line"
      let "line_num++"
    done < "$file_to_read"
  elif [ "$read_response" == "n" -o "$read_response" == "no" ] ; then
    read -p "What file would you like to read?  " file_to_read
    echo "Reading $file_to_read"
    while read line ; do
      printf "%s\n" "Line $line_num: $line"
      let "line_num++"
    done < "$file_to_read"
  fi
fi
========================
SCRIPT NAME: script_skeleton.sh
========================
#/bin/bash
# script that creates the skeleton to a well formated script

##### function declerations - start

# function to check if the file the user want to format is a new file or is an existing file, if not existing, it creates the file
# sets "exit status" to be used later
funcCheckFileExists () {
if [ -f $FILE_TO_FORM ] ; then
  echo "File \"$FILE_TO_FORM\" exists!"
  fCheck_File_Exists_Status="file_exists"
else
  echo "Creating file: $FILE_TO_FORM"
  touch "$FILE_TO_FORM"
  fCheck_File_Exists_Status="file_created"
fi
}

# function to check what content is in the file and display it to the user if they want to see it
funcCheckFileContent () {
  FILE_LINES=`wc -l "$FILE_TO_FORM"`

  echo "File $FILE_TO_FORM has $FILE_LINES lines"
  read -p "Would you like to see the first 10 lines of the file? " HEAD_RESPONSE
  if [ "$HEAD_RESPONSE" == "y" ] ; then
    echo ""
    echo "Below are the first 10 lines of $FILE_TO_FORM"
    head $FILE_TO_FORM
  elif [ "$HEAD_RESPONSE" == "n" ] ; then
    echo "Okaaay... moving onnn!"
  fi

}

#function to check if user wants to format file, then format it and make the file executable
funcFormatFile () {
  read -p "Would you like to format the script? (Answer y or n) " FORMAT_RESPONSE
  if [ "$FORMAT_RESPONSE" = "y" ] ; then
    echo "Formatting script!"
    cat script_template.txt >> $FILE_TO_FORM
    chmod 777 $FILE_TO_FORM
  elif [ "$FORMAT_RESPONSE" == "n"] ; then
    echo "NOT formatting script!"
  fi
}

# function to vim into the newly formatted file
funcVimFileToFormat () {
  echo "Vimming newly formatted file now!"
  sleep 2
  vim $FILE_TO_FORM
}

##### function declerations - stop

##### script - start

clear

read -p "What script would you like to format? " FILE_TO_FORM

funcCheckFileExists

if [ "$fCheck_File_Exists_Status" == "file_exists" ] ; then
  funcCheckFileContent
elif [ "$fCheck_File_Exists_Status" == "file_created" ] ; then
  echo "Created $FILE_TO_FORM"
  # call function that sees if they want to format the file and then formats it
  funcFormatFile
  funcVimFileToFormat
fi

##### script - stop
========================
SCRIPT NAME: simpledialog.sh
========================
#!/bin/bash
# demo of a dialog box that will display a menu

##### global variables - start

MENUBOX=${MENUBOX=dialog}

##### global variable - stop



##### function declerations - start

# function to display a simple menu
funcDisplayDialogMenu () {
  $MENUBOX --title "[ M A I N  M E N U ]" --menu "Use UP/DOWN Arrow to Move and Select or the Number of Your Choice and Enter" 15 45 4 1 "Display Hello World" 2 "Display Goodbye World" 3 "Display Nothing" X "Exit" 2>choice.txt
}

##### function declerations - stop



##### script - start

funcDisplayDialogMenu

case "`cat choice.txt`" in
  1) echo "Hello World" ;;
  2) echo "Goodbye World" ;;
  3) echo "Nothing" ;;
  X) echo "Exit" ;;
esac

##### script - stop
========================
SCRIPT NAME: simplefunc.sh
========================
#!/bin/bash
# script to demonstrat functions

echo "Starting the function definition..."

funcExample () {
  echo "We are now INSIDE the function..."
}

funcExample
========================
SCRIPT NAME: simpleinfobox.sh
========================
#/bin/bash
# demo of a simple info box and an info box

###### global variables / default values
INFOBOX=${INFOBOX=dialog}
TITLE="Defautl"
MESSAGE="Something to say"
XCOORD=10
YCOORD=20

##### function declarations - start

# display the infobox and our message
funcDisplayInfoBox () {
  $INFOBOX --title "$1" --infobox "$2" "$3" "$4"
  sleep "$5"
}

##### function declerations - stop

##### script - start

if [ "$1" == "shutdown" ] ; then
  funcDisplayInfoBox "WARNING!" "We are SHUTTING DOWN the System..." "11" "21" "5"
  echo "Shutting Down!"
else
  funcDisplayInfoBox "Information..." "You are not doing anything fun..." "11" "21" "5"
  echo "Not doing anything..."
fi

##### script - stop
========================
SCRIPT NAME: simpleinputbox.sh
========================
#!/bin/bash
# simple demo of an input dialog box

##### global variables - start

INPUTBOX=${INPUTBOX=dialog}
TITLE="Default"
MESSAGE="Something to display"
XCOORD=10
YCOORD=20

##### global variable - stop



##### function declerations - start

# display the input box
funcDisplayInputBox () {
  $INPUTBOX --title "$1" --inputbox "$2" "$3" "$4" 2>tmpfile.txt
}

##### function declerations - stop



##### script - start

funcDisplayInputBox "Display File Name" "Which file in the current directory do you want to display?" "10" "20"

if [ "`cat tmpfile.txt`" != "" ] ; then
  cat "`cat tmpfile.txt`"
else
  echo "Nothing to do"
fi

##### script - stop
========================
SCRIPT NAME: simplemsgbox.sh
========================
#!/bin/bash
# demo of a message box with an ok button

##### global variables - start

MSGBOX=${MSGBOX=dialog}
TITLE="Default"
MESSAGE="Some Message"
XCOORD=10
YCOORD=20

##### global variable - stop



##### function declerations - start

# display the message box with our message
funcDisplayMsgBox () {
  $MSGBOX --title "$1" --msgbox "$2" "$3" "$3"
}

##### function declerations - stop



##### script - start

if [ "$1" == "shutdown" ] ; then
  funcDisplayMsgBox "WARNING!" "Please press OK when you are ready to shutdown the system" "20" "20"
  echo "Shutting down now!"
else
  funcDisplayMsgBox "Boring..." "You are not asking for anything fun..." "10" "20"
fi

##### script - stop
========================
SCRIPT NAME: trapex.sh
========================
#!/bin/bash
# script to demonstrate trap signals

clear

trap 'echo " - Please Typte Q to Exit"' SIGTERM SIGINT

while [ "$CHOICE" != "Q" ] && [ "$CHOICE" != "q" ] ; do
  clear
  echo "Main Menu"
  echo "====="
  echo "1) Choice One"
  echo "2) Choce Two"
  echo "Q) Quit"
  echo
  read CHOICE
done
========================
SCRIPT NAME: using_arrays.sh
========================
#!/bin/bash

MYARRAY=(Brazil Germany France Spain Argentina)
COUNT=0

for i in ${MYARRAY[@]}; do
	echo "Countries in the World Cup 2018: ${MYARRAY[COUNT]}"
	COUNT=`expr "$COUNT" + 1`
done
echo all done!
========================
SCRIPT NAME: varscope.sh
========================
#/bin/bash
# demo of variable scop

# global variable declaration
GLOBALVAR="Globally Visible"

# function definition - start

# sample function for the function variable scope
funcExample () {
  # local variable
  LOCALVAR="Locally Visible"

  echo "From within the function, the variable is $LOCALVAR..."
}

# function definitions - stop

# script - start
clear

echo "This step happens first..."
echo
echo "GLOBAL variable = $GLOBALVAR (before the function call)"
echo "LOCAL variable = $LOCALVAR (before the function call)"
echo
echo "Calling Function - funcExample()"
echo

funcExample

echo
echo "Function has been called.."
echo

echo
echo "GLOBAL variable = $GLOBALVAR (after the function call)"
echo "LOCAL variable = $LOCALVAR (after the function call)"
echo
